from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from bags.models import Order, OrderItem
from django.db.models import Count, Sum, Avg
from bags.utils import send_cleanup_notification, get_cart_statistics


class Command(BaseCommand):
    help = '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∑–∏–Ω –∏ –∑–∞–∫–∞–∑–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=30,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)'
        )
        parser.add_argument(
            '--notify',
            action='store_true',
            help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞'
        )

    def handle(self, *args, **options):
        days = options['days']
        notify = options['notify']
        cutoff_date = timezone.now() - timedelta(days=days)

        self.stdout.write(
            self.style.SUCCESS(f'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–†–ó–ò–ù –ò –ó–ê–ö–ê–ó–û–í (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)')
        )
        self.stdout.write('=' * 60)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_orders = Order.objects.count()
        total_carts = Order.objects.filter(status='new').count()
        total_items = OrderItem.objects.count()
        total_cart_items = OrderItem.objects.filter(order__status='new').count()

        self.stdout.write('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'  –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}')
        self.stdout.write(f'  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω: {total_carts}')
        self.stdout.write(f'  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö: {total_items}')
        self.stdout.write(f'  –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö: {total_cart_items}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        self.stdout.write('\nüè∑Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:')
        status_stats = Order.objects.values('status').annotate(
            count=Count('id'),
            total_price=Sum('total_price')
        ).order_by('status')

        for stat in status_stats:
            status_display = dict(Order.STATUS_CHOICES)[stat['status']]
            self.stdout.write(
                f'  {status_display}: {stat["count"]} –∑–∞–∫–∞–∑–æ–≤ '
                f'(—Å—É–º–º–∞: {stat["total_price"] or 0:.2f} ‚ÇΩ)'
            )

        # –°—Ç–∞—Ä—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        old_carts = Order.objects.filter(
            status='new',
            created_at__lt=cutoff_date
        )
        old_carts_count = old_carts.count()
        old_carts_items = OrderItem.objects.filter(order__in=old_carts).count()

        self.stdout.write(f'\nüóëÔ∏è –°–¢–ê–†–´–ï –ö–û–†–ó–ò–ù–´ (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π):')
        self.stdout.write(f'  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {old_carts_count}')
        self.stdout.write(f'  –¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∏—Ö: {old_carts_items}')

        if old_carts_count > 0:
            avg_age = old_carts.aggregate(
                avg_age=Avg(timezone.now() - timezone.F('created_at'))
            )['avg_age']
            avg_days = avg_age.days if avg_age else 0
            self.stdout.write(f'  –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_days} –¥–Ω–µ–π')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.stdout.write('\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú:')
        users_with_carts = Order.objects.filter(status='new').values('user').distinct().count()
        users_with_orders = Order.objects.exclude(status='new').values('user').distinct().count()

        self.stdout.write(f'  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—Ä–∑–∏–Ω–∞–º–∏: {users_with_carts}')
        self.stdout.write(f'  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏: {users_with_orders}')

        # –¢–æ–ø –∫–æ—Ä–∑–∏–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
        self.stdout.write('\nüì¶ –¢–û–ü-5 –ö–û–†–ó–ò–ù –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –¢–û–í–ê–†–û–í:')
        top_carts = Order.objects.filter(status='new').annotate(
            items_count=Count('orderitem')
        ).order_by('-items_count')[:5]

        for i, cart in enumerate(top_carts, 1):
            self.stdout.write(
                f'  {i}. –ö–æ—Ä–∑–∏–Ω–∞ #{cart.id} ({cart.user.email}): '
                f'{cart.items_count} —Ç–æ–≤–∞—Ä–æ–≤, {cart.total_price} ‚ÇΩ'
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.stdout.write('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')

        if old_carts_count > 0:
            self.stdout.write(
                self.style.WARNING(
                    f'  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {old_carts_count} —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω. '
                    f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞: python manage.py cleanup_old_carts'
                )
            )

        if total_carts > 1000:
            self.stdout.write(
                self.style.WARNING(
                    f'  ‚ö†Ô∏è –ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω ({total_carts}). '
                    f'–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É.'
                )
            )

        if total_cart_items > 5000:
            self.stdout.write(
                self.style.WARNING(
                    f'  ‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö ({total_cart_items}). '
                    f'–ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.'
                )
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if notify:
            stats = get_cart_statistics()
            if send_cleanup_notification(stats):
                self.stdout.write(
                    self.style.SUCCESS(
                        '\nüìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É '
                        f'(—Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω: {stats["old_carts_30_days"]})'
                    )
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS(
                        '\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω –Ω–µ—Ç)'
                    )
                )

        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!')
        )
